<?php

/**
 * Implementation of hook_form_alter().
 */
function external_datasets_form_alter(&$form, $form_state, $form_id) {

  // Deal with exposed category filter dropdown
  if ($form_id == 'views_exposed_form') {
    if (empty($form['#info']['filter-field_categorization_value'])) {
      return;
    }
    // Trick to swap the text form field with dropdown field.
    $form['field_categorization_value_1']['#options'] = array(''=>'-Any-') + external_datasets_get_categories();
    $form['field_categorization_value'] = $form['field_categorization_value_1'];
    unset($form['field_categorization_value_1']);
    
    // Set form action to stay on the page. Otherwise it might be
    // redirected to some unstyles page.
    $form['#action'] = '';

    return;
  }

  // Deal with data node editing form.
  if($form_id != 'data_node_form') {
    return;
  }

  $form['title']['#required'] = FALSE;
  // Put external elements into an external fieldset.
  $form['external'] = array(
    '#type' => 'fieldset',
    '#title' => t('From External Source'),
    '#description' => t('Elements to be populated from external source. Any manual input will be overridden.'),
    '#weight' => 5,
    '#collapsible' => TRUE,
  );

  $external_elements = array(
    'title',
    'body',
    'field_agency',
    'field_dataset_vocabulary',
  );

  foreach ($external_elements as $element) {
    $form['external'][$element] = $form[$element];
    unset($form[$element]);
  }

  // Add a validate function to block CKAN data editing.
  $form['#validate'][]  = 'external_datesets_node_validate';

  // Use our own submit function.
  $form['#submit'][]  = 'data_node_submit';
}

// Our node editting validation function
function external_datesets_node_validate($form, &$form_state) {
  $id = $form_state['values']['field_dataset_id']['und'][0]['value'];

  // no ckan data editing.
  if (!preg_match('/^\d+$/', $id)) {
    if ($form_state['values']['nid']) {
      $msg = t("Not a valid Dataset ID. If you are trying to edit a geospatial dataset, edit on CKAN site and have it synchronized with daily schedule or manually.");
    }
    else {
      $msg = t("Not a valid Dataset ID. If you are trying to add a geospatial dataset, it is not necessary since all geospatial datasets are synchronized from CKAN site with daily schedule or manually.");
    }
    form_set_error('',$msg);
    return;
  }

  // no fake data.
  $b_echo_out = FALSE;
  $use_cache = FALSE;
  // Fetch external dataset info using module datagov_get_metadata
  $dataset_info = datagov_get_metadata_page($id, $b_echo_out, $use_cache);
  $dataset_info = json_decode($dataset_info);

  if (empty($dataset_info)) {
    $msg = t("Not able to fetch dataset info. Either Dataset ID is not correct, or external server is not responding.");
    form_set_error('',$msg);
    return;
  }

}

// Get a list of valid categories for a given group.
function external_datasets_get_categories() {
  $group_node = og_context();
  $group_id = $group_node->gid;

  if (!empty($group_id)) {
    $sql = <<<EOD
SELECT DISTINCT(field_categorization_value) FROM {field_data_field_categorization} f
WHERE entity_id IN 
(
SELECT node.nid
FROM {node} node
LEFT JOIN {og_membership} og_membership_node 
ON node.nid = og_membership_node.etid AND og_membership_node.entity_type = 'node'
LEFT JOIN {field_data_group_audience} field_data_group_audience 
ON node.nid = field_data_group_audience.entity_id 
AND (field_data_group_audience.entity_type = 'node' 
AND field_data_group_audience.deleted = '0')
WHERE
field_data_group_audience.group_audience_gid = :gid
AND 
node.status = '1'
AND node.type ='data'
)
AND
field_categorization_value is not NULL AND field_categorization_value <> '' 
ORDER BY field_categorization_value ASC
EOD;

  }
  else{
    $sql = <<<EOD
SELECT DISTINCT(field_categorization_value) FROM {field_data_field_categorization} f
WHERE entity_id IN 
(
SELECT node.nid
FROM {node} node
LEFT JOIN {og_membership} og_membership_node 
ON node.nid = og_membership_node.etid AND og_membership_node.entity_type = 'node'
LEFT JOIN {field_data_group_audience} field_data_group_audience 
ON node.nid = field_data_group_audience.entity_id 
AND (field_data_group_audience.entity_type = 'node' 
AND field_data_group_audience.deleted = '0')
WHERE
node.status = '1'
AND node.type ='data'
)
AND
field_categorization_value is not NULL AND field_categorization_value <> '' 
ORDER BY field_categorization_value ASC
EOD;
  }

  $result = db_query($sql, array(':gid' => $group_id));

  $ret = array();
  foreach ($result as $row) {
    $ret[$row->field_categorization_value] = $row->field_categorization_value;
  }

  return $ret;
}

// Get a list of valid categories for a given group to display it on the right side block.
function dataset_categories_list()
{
    $cats = external_datasets_get_categories();
    $output = '<ul>';
    foreach($cats as $cat)
    {

         $output .= '<li><a href="?field_categorization_value=' . $cat .'">' . $cat . '</a></li>';
    }
    $output .= '</ul>';
    return($output);
}

/**
 * Define our own function to save Data node.
 */
function data_node_submit($form,&$form_state) {

  $dataset_id = $form_state['values']['field_dataset_id']['und'][0]['value'];
  $b_echo_out = FALSE;
  // Fetch external dataset info using module datagov_get_metadata
  $dataset_info = datagov_get_metadata_page($dataset_id, $b_echo_out);
  $dataset_info = json_decode($dataset_info);

  // not supposed to happen since we have validated it.
  if (empty($dataset_info)) {
    // Discard any input.
    $form_state['values']['title'] = '';
    $form_state['values']['body']['und'][0]['value'] = '';
    $form_state['values']['field_agency']['und'][0]['value'] = '';
    $form_state['values']['field_dataset_vocabulary']['und'] = array();
    return;
  }

  if (strlen($dataset_info->name) !== 0) { // Use name property as ckan indicator
    $is_ckan = true;
    $title = $dataset_info->title;
    $body = $dataset_info->notes;
    $agency = $dataset_info->extras->{"responsible-party"};
    $keywords = $dataset_info->extras->tags;
    if (strpos($keywords, "REQUIRED:") === 0) {
      $keywords = "";
    }
    $keywords = explode(',', $keywords);
  }
  else {
    $is_ckan= false;
    $title = $dataset_info->title;
    $body = $dataset_info->description;
    $agency = $dataset_info->agency;
    // $keywords is delimitered by comma and new line.
    $keywords = str_replace("\n", ",", $dataset_info->keywords);
    $keywords = explode(',', $keywords);
  }

  // title
  $form_state['values']['title'] = $title;

  // body
  $form_state['values']['body']['und'][0]['value'] = $body;

  // field_agency
  $form_state['values']['field_agency']['und'][0]['value'] = $agency;

  // field_dataset_vocabulary
  $vocabulary = $form_state['field']['field_dataset_vocabulary']['und']['field']['settings']['allowed_values'][0]['vocabulary'];
  $vocabularies = taxonomy_vocabulary_get_names();
  $vid = $vocabularies[$vocabulary]->vid;

  foreach ($keywords as $keyword) {
    $terms = taxonomy_get_term_by_name($keyword, $vocabulary);
    if (!empty($terms)) {
      $term = array_shift(array_values($terms));
      $form_state['values']['field_dataset_vocabulary']['und'][] = array(
        'tid' => $term->tid,
        'vid' => $term->vid,
        'name' => $term->name,
        'description' => $term->description,
        'format' => $term->format,
        'weight' => $term->weight,
        'uuid' => $term->uuid,
        'vocabulary_machine_name' => $term->vocabulary_machine_name,
      );
    }
    else {
      $form_state['values']['field_dataset_vocabulary']['und'][] = array(
        'tid' => 'autocreate',
        'vid' => $vid,
        'name' => $keyword,
        'vocabulary_machine_name' => $vocabulary,
      );
    }
  }

}

function get_download_formats_string_by_datasetID($dataset_id){
  $b_echo_out = FALSE;
  $datasetInfo = datagov_get_metadata_page($dataset_id, $b_echo_out);
  $datasetInfo = json_decode($datasetInfo);
  $formats = array(
    'xml'=>array(
      'title'=>'XML document',
      'image_location'=>base_path().drupal_get_path('module','external_datasets').'/images/download-xml.gif'
      ),
    'csv' =>array(
      'title'=>'CSV document',
      'image_location'=>base_path().drupal_get_path('module','external_datasets').'/images/download-csv.gif'
      ),
    'kml' =>array(
      'title'=>'KML/KMZ document',
      'image_location'=>base_path().drupal_get_path('module','external_datasets').'/images/download-kml.gif'
      ),
    'esri' =>array(
      'title'=>'Shapefile document',
      'image_location'=>base_path().drupal_get_path('module','external_datasets').'/images/download-esri.gif'
      ),
    'pdf' =>array(
      'title'=>'PDF document',
      'image_location'=>base_path().drupal_get_path('module','external_datasets').'/images/download-pdf.gif',
      'width'=>'22',
      'height'=>'23'
      ),
    'xls' =>array(
      'title'=>'Excel document',
      'image_location'=>base_path().drupal_get_path('module','external_datasets').'/images/download-xls.gif'
      ),
    'rdf' =>array(
      'title'=>'RDF document',
      'image_location'=>base_path().drupal_get_path('module','external_datasets').'/images/download-rdf.gif'
      ),
    'rss' =>array(
      'title'=>'RSS/Atom feeds',
      'image_location'=>base_path().drupal_get_path('module','external_datasets').'/images/icon-feed.gif',
      'width'=>'21',
      'height'=>'21'
      ),
    'data_extraction' =>array(
      'title'=>'Data extraction tool',
      'image_location' =>base_path().drupal_get_path('module','external_datasets').'/images/icon-extraction.gif',
      'width'=>'21',
      'height'=>'21'      
      ),
    'widget' =>array(
      'title'=>'Widget',
      'image_location'=>base_path().drupal_get_path('module','external_datasets').'/images/icon-widget.gif',
      'width'=>'18',
      'height'=>'18'
      ),
    'geodata' =>array(
      'title'=>'Geo-enabled data',
      'image_location' =>base_path().drupal_get_path('module','external_datasets').'/images/icon-geo.png',
      'width'=>'21',
      'height'=>'21'      
      ),
    'ckan' =>array(
      'title'=>'Geo-enabled CKAN data',
      'image_location' =>base_path().drupal_get_path('module','external_datasets').'/images/icon-geo.png',
      'width'=>'21',
      'height'=>'21'
      ),
    );

  $output = "";
  if (strlen($datasetInfo->name) > 0) {
    foreach($formats as $format_key=>$format_details){
      foreach($datasetInfo->$format_key as $download_format_detail){
      $output.="
      <a href='" . str_replace("&type=rss", "&type=feeds", $download_format_detail->access_point) . "'
       title='". "Geo-enabled CKAN data" . (isset($download_format_detail->file_size)?" (".$download_format_detail->file_size.")":"") . "'>
        <img 
           src='".$format_details['image_location']."' 
           alt='".$format_details['title'] ."' 
           width='".(isset($format_details['width'])?$format_details['width']:41)."' 
           height='".(isset($format_details['height'])?$format_details['height']:13)."'/>
      </a><br/>
      ";
      }
    }
  }
  else {
    foreach($formats as $format_key=>$format_details){
      foreach($datasetInfo->$format_key as $download_format_detail){
      $output.="
      <a href='" . str_replace("&type=rss", "&type=feeds", $download_format_detail->access_point) . "'
         title='".$format_details['title'] . (isset($download_format_detail->file_size)?" (".$download_format_detail->file_size.")":"") . "'>
          <img 
             src='".$format_details['image_location']."' 
             alt='".$format_details['title'] ."' 
             width='".(isset($format_details['width'])?$format_details['width']:41)."' 
             height='".(isset($format_details['height'])?$format_details['height']:13)."'/>
        </a><br/>
        ";
      }
    }
    foreach($datasetInfo->map as $download_format_detail){
      $output.="<a href = '".$download_format_detail->access_point."'>View Map</a><br/>";
    }
  }

  return $output;
}

// Prepare variables for themes.
function external_datasets_preprocess_node(&$vars){
  $node = $vars['node'];
  if ($node->type != 'data') {
    return;
  }

  $dataset_id = $node->field_dataset_id['und'][0]['value'];
  $b_echo_out = FALSE;
  $datasetInfo = datagov_get_metadata_page($dataset_id, $b_echo_out);
  $vars['datasetInfo'] = json_decode($datasetInfo);

  $vars['dataset_id'] = $dataset_id;
}
