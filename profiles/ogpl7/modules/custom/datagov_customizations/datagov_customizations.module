<?php

/*
 *  Module to add Data.gov specific customizations.
 */

// Workaround (#34) for http://drupal.org/node/1615438
// known bug related to search term containing multiple words
function datagov_customizations_views_query_alter(&$view, &$query) {
  if (isset($query->fields['score'])) {
    unset($query->fields['score']);
  }

  // Default display for users having 'community export' view access which are not super admins  DG:1238
  global $user;
  $roles = $user->roles;
  $is_superuser = in_array('Super User', $roles);
  $is_content_admin = in_array('Content Administrator', $roles);
  if(!($user->uid == 1 || $is_superuser || $is_content_admin)) {
    if ($view->name == 'community_export_external' && count($view->exposed_input['gid'][0]) == 0) {
      $group_id = og_get_groups_by_user();
      $query->where[1]['conditions'][1]['field'] = 'og_membership_node.gid';
      foreach($group_id as $id){
        $query->where[1]['conditions'][1]['value'][$id] = $id;
      }
      if ($view->exposed_input['type'][0] == 'community') { //if the type is 'community' then add condition to list the nid for the groups
        $group_id = og_get_groups_by_user();
        $query->where[1]['conditions'][1]['field'] = 'node.nid';
        foreach($group_id as $id){
          $group = og_load($id);
          $nid = $group->etid;
          $query->where[1]['conditions'][1]['value'][$nid] = $nid;
        }
      }
    }
    //  DG-1372 : User should not be able to see comments of the community which is not belongs to user.
    if ($view->name == 'comment_moderation' && count($view->exposed_input['gid'][0]) == 0) {
      $group_id = og_get_groups_by_user();
      $query->where[1]['conditions'][1]['field'] = 'og_membership_node.gid';
      foreach($group_id as $id){
        $query->where[1]['conditions'][1]['value'][$id] = $id;
      }

      if ($view->exposed_input['type'][0] != '') {
        $group_id = og_get_groups_by_user();
        $query->where[1]['conditions'][1]['field'] = 'og_membership_node.gid';
        $query->where[1]['conditions'][1]['value'] = array();
        $query->where[1]['conditions'][1]['operator'] ='in';
        if ($view->exposed_input['status'] == 0 ) {
          $query->where[1]['conditions'][2]['field'] = 'comment.status';
          $query->where[1]['conditions'][2]['value'] = 0;
        }
        else {
          $query->where[1]['conditions'][2]['field'] = 'comment.status';
          $query->where[1]['conditions'][2]['value'] = 1;
        }
        foreach($group_id as $id){
          $query->where[1]['conditions'][1]['value'][$id] = $id;
        }

      }
    }

  }
}

function datagov_customizations_form_alter(&$form, $form_state, $form_id) {

  // #jira DG-1172: Sort community names in registration page and other places in CMS
  if (isset($form['edit_group_membership']['group_membership']['#options'])) {
    asort($form['edit_group_membership']['group_membership']['#options']);
  }
  if (isset($form['group_audience']['und']['#options'])) {
    asort($form['group_audience']['und']['#options']);
  }
  if (isset($form['group_audience']['und']['#options']['My communities'])) {
    asort($form['group_audience']['und']['#options']['My communities']);
  }
  if(isset($form['group_audience']['und']['#options']['Other communities'])) {
    asort($form['group_audience']['und']['#options']['Other communities']);
  }



  // #jira DG-1066. Menu parent item is not populated right. We add some js for a quick fix.

  // Only handle node editing form
  if(!preg_match('/^[a-zA-Z0-9_]+_node_form$/', $form_id)) {
    return;
  }

  // Get parent item, which is last but one.
  $menu = menu_get_active_trail();
  $count = count($menu);
  if ( $count < 2) {
    return;
  }
  $menu = end($menu);
  $parent_value = $menu['menu_name'] . ":" . $menu['plid'];

  $inline_js = "jQuery(document).ready(function () {jQuery('#edit-menu-parent').val('$parent_value');})"; 
  drupal_add_js($inline_js, 'inline');

}

function datagov_customizations_get_published_communities() {
  static $communities_published;

  if (isset($communities_published)) {
     return $communities_published;
   } 

  // Find out all published communities.
  $gids = og_get_all_group();
  $communities_published = array();
  foreach ($gids as $gid) {
    $group = og_load($gid);
    $group_node = node_load($group->etid);
    if ($group_node->status) {
      $communities_published[] = $group->gid;
    } 
  }

  return $communities_published;

}

function datagov_customizations_views_pre_render(&$view) {

  $communities_published = datagov_customizations_get_published_communities();

  switch ($view->name) {

    case "communities_activity_graph":
      $valid_entries = array();
      $count = count($view->result);
      for ($i=0; $i < $count; $i++) {
        if (in_array($view->result[$i]->field_data_group_audience_group_audience_gid, $communities_published)) {
          $valid_entries[] = $view->result[$i];
        }
        // Only need up to 3 items
        if (count($valid_entries) == 3) {
          break;
        }
      }
      $view->result = $valid_entries;
      break;

    case "community_activity_feed_content":
    case "community_events":
    case "community_featured_content":
      if ($view->name == 'community_events' && $view->current_display != 'ogpl_upcoming_events_page') {
        $valid_entries = array();
        foreach($view->result as $value) {
          $published = FALSE;
          $groups = $value->_field_data['nid']['entity']->group_audience[LANGUAGE_NONE];
          if (count($groups)) {
            foreach ($groups as $this_group) {
              /**
               * loop through communities until we find a published one.
               * all we need is the first valid community.
               * if we find it, mark it as such and stop looping through communities.
               **/
              if (in_array($this_group['gid'], $communities_published)) {
                $published = TRUE;
                break;
              }

            }
          }else{$published = TRUE;}

          if ($published) {
            $valid_entries[] = $value;
         }
        }
        $view->result = $valid_entries;
        break;
      }
      $valid_entries = array();
      $count = count($view->result);
      for ($i=0; $i < $count; $i++) {
        $groups = $view->result[$i]->field_group_audience;
        // At least one published group?
        $b_published = FALSE;
        if (count($groups)) { // only happens when there is at least one group
          foreach ($groups as $group) {
            if (in_array($group['raw']['gid'], $communities_published)) {
              $b_published = TRUE;
              break;
            }
          }
        } else { // if no groups, then we want to show this event
          $b_published = TRUE;
        }
        if ($b_published) {
          // modify $view->result[$i]: filter out the unpublished communities here
            if (count($view->result[$i]->field_group_audience)) {
              foreach ($view->result[$i]->field_group_audience as $key => $value) {
                if (!in_array($value['raw']['gid'], $communities_published)) {
                  unset($view->result[$i]->field_group_audience[$key]);
                }
              }
            }

          $valid_entries[] = $view->result[$i];
        }
        $limit = 10; // default
        if (
            ($view->name == 'community_activity_feed_content' && $view->current_display == 'ogpl_community_event_block')
            ||
            ($view->name == 'community_featured_content')
           ) {
          $limit = 3;
        }
        if ($view->name == 'community_events' && $view->current_display == 'ogpl_upcoming_events_page') {
          $limit = 0; // no limit for this view
        }
        // Only need up to 10 items
        if (($limit != 0) && count($valid_entries) == $limit) {
          break;
        }
      }
      $view->result = $valid_entries;
      break;


    default:
    //
  }

  // communities_activity_graph
  // community_activity_feed_content
  // community_hub_slideshow
  // community_featured_content
  // community_activity_feed_content
}


/**
 * Implementation of hook_views_api().
 */
function datagov_customizations_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'datagov_customizations') . '/views',
  );
}

/**
 * Implementation of hook_og_role_grant().
 */
function datagov_customizations_og_role_grant($gid, $uid, $rid) {

    /**
	CORE ROLE MAP TABLE FROM OG D7 TO Core D7
	
	D7-OG-rid	D7-OG-role-name		D7-CORE-rid	D7-CORE-role-name
	------		-------------		-------		--------------
	3   		community admin		30 		Community Administrator
	4  		community moderator	31		Community Moderator 
	5   		community contributor   32		Community Contributor 

    */

    $coreRoleMap = array (
      '3' => 30,
      '4' => 31,
      '5' => 32,
    );

    if(isset($coreRoleMap[$rid])) {
      user_multiple_role_edit(array($uid), 'add_role', $coreRoleMap[$rid]);
    }
}

/**
 * Implementation of hook_menu().
 */
function datagov_customizations_menu() {
  $items['admin/config/init_datasites'] = array(
    'title' => 'Initialize Datasite URLs',
    'description' => 'Copy data from old URL field to new URL field',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('datagov_customizations_init_datasites_form'),
    'access arguments' => array('administer content types'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

function datagov_customizations_init_datasites_form($form, &$form_state) {
  $form['buttons']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Copy to new field'),
  );

  return $form;
}

function datagov_customizations_init_datasites_form_submit($form, &$form_state) {
  $terms = array(
    'international' => array(
      'first' => current(taxonomy_get_term_by_name('International Country', "open_datasite_url_types"))->tid,
      'remaining' => current(taxonomy_get_term_by_name('International Regional', "open_datasite_url_types"))->tid,
    ),
    'us' => array(
      'first' => current(taxonomy_get_term_by_name('US State', "open_datasite_url_types"))->tid,
      'remaining' => current(taxonomy_get_term_by_name('US City or County', "open_datasite_url_types"))->tid,
    ),
  );

  // loop through all field_datasite_url_with_type field collection items
  $entities = entity_load('field_collection_item');
  $query = new EntityFieldQuery;
  $result = $query
    ->entityCondition('entity_type', 'field_collection_item')
    ->entityCondition('bundle', 'field_datasite_url_with_type')
    ->execute();
  foreach ($result['field_collection_item'] as $key => $value) {
    // delete existing values for field_datasite_url_with_type
    entity_delete('field_collection_item', $key);
  }

  // loop through all open_datasite_reference nodes
  $type = "open_datasite_reference";
  $nodes = node_load_multiple(array(), array('type' => $type));
  foreach ($nodes as $node) {
    $is_intl_idx = (current(taxonomy_get_term_by_name('State Sites', "open_datasites_groupings"))->tid == $node->field_open_datasite_grouping[LANGUAGE_NONE][0]['tid']) ? 'us' : 'international';
    $node->field_datasite_url_with_type = array();
    // loop through all field_datasite_url values
    if (count($node->field_datasite_url[LANGUAGE_NONE]) > 0) {
      $is_first_idx = 'first';
      foreach ($node->field_datasite_url[LANGUAGE_NONE] as $value) {
        // copy to field_datasite_url_with_type values
        $new_entity_values = array(
          'field_name' => 'field_datasite_url_with_type',
          'field_url' => array(
            LANGUAGE_NONE => array(array(
              'url' => $value['url'],
              'title' => $value['title'],
            )),
          ),
          'field_url_type' => array(
            LANGUAGE_NONE => array(array(
              'tid' => $terms[$is_intl_idx][$is_first_idx],
            )),
          ),
        );

        $new_entity = entity_create('field_collection_item', $new_entity_values);
        $new_entity->setHostEntity('node', $node);
        $new_entity->save();

        $is_first_idx = 'remaining';
      }
    }

    $node = node_submit($node);
    node_save($node);
  }
  drupal_set_message(t('Datasite URLs initialized. Go to content and update the URL types.'));
}
