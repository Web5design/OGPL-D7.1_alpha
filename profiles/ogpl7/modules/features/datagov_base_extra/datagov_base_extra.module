<?php
/**
 * Implement hook_modules_enabled().
 * Typically, defaultcontent.module waits for cron to create nodes.
 * This forces node creation immediately, then sets front page URL.
 */
function datagov_base_extra_modules_enabled($modules) {   
  // quit if datagov_base hasn't been enabled
  if (!in_array('datagov_base', $modules)) return;

  // insert log in menu link into user-menu
  $item = array(
    'menu_name' => 'user-menu',
    'module' => 'menu',
    'router_path' => 'user/login',
    'link_path' => 'user/login',
    'link_title' => 'Log in',
  );
  menu_link_save($item);



  // set user-menu block title to <none>
  db_merge('block')
    ->key(array(
      'theme' => 'datagov',
      'module' => 'system',
      'delta' => 'user-menu',
    ))
    ->fields(array(
      'status' => 0,
      'weight' => 0,
      'region' => -1,
      'custom' => 0,
      'visibility' => 0,
      'pages' => '',
      'title' => '<none>',
      'cache' => -1,
    ))
    ->execute();


  // set main-menu block title to <none>
  db_merge('block')
    ->key(array(
      'theme' => 'datagov',
      'module' => 'superfish',
      'delta' => '1',
    ))
    ->fields(array(
      'status' => 0,
      'weight' => 0,
      'region' => -1,
      'custom' => 0,
      'visibility' => 0,
      'pages' => '',
      'title' => '<none>',
      'cache' => -1,
    ))
    ->execute();

  // set menu-footer-menu block title to <none>
  db_merge('block')
    ->key(array(
      'theme' => 'datagov',
      'module' => 'menu',
      'delta' => 'menu-footer-menu',
    ))
    ->fields(array(
      'status' => 0,
      'weight' => 0,
      'region' => -1,
      'custom' => 0,
      'visibility' => 0,
      'pages' => '',
      'title' => '<none>',
      'cache' => -1,
    ))
    ->execute();
    

  // add fusion grid configuration (does not provide exportables)

  $filename = realpath(dirname(__FILE__)) . "/fusion_skins.inc";
  $handle = fopen($filename, "r");
  $contents = fread($handle, filesize($filename));

  // validate skins
  $skins = '';
  ob_start();
  eval($contents);
  ob_end_clean();

  foreach ($skins as $key => $skin) {
    if (!is_array($skin)) {
      watchdog('fusion import error', t('These are not valid skin configurations.'));
      break;
    }
    $skins[$key] = (object) $skin;
    if (!fusion_apply_skin_validate($skins[$key])) {
      watchdog('fusion import error', t('These are not valid skin configurations.'));
    }
  }

  // import skins
  foreach ($skins as $skin) {
    // Find existing skin configuration and grab its sid.
    $params = array(
      'theme' => $skin->theme,
      'module' => $skin->module,
      'element' => $skin->element,
      'skin' => $skin->skin,
    );
    $sids = fusion_apply_skin_get_sids($params);
    if (!empty($sids)) {
      $skin->sid = reset($sids);
    }

    // Save skin configuration.
    if (!fusion_apply_skin_save($skin)) {
      watchdog('fusion import error', t('Not all skin configurations could be saved!'));
    }
  }



  fclose($handle);
  
}
